% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processVCFfast.R
\name{processVCF}
\alias{processVCF}
\title{Process VCF into MPRA sequences}
\usage{
processVCF(vcf, nper, upstreamContextRange, downstreamContextRange,
  fwprimer, revprimer, enzyme1 = "GGTACC", enzyme2 = "TCTAGA",
  enzyme3 = "GGCCNNNNNGGCC", filterPatterns = "AATAAA",
  alter_aberrant = FALSE, extra_elements = FALSE,
  max_construct_size = NULL, barcode_set = "barcodes16-1",
  outPath = NULL)
}
\arguments{
\item{vcf}{the path to the input VCF}

\item{nper}{the number of barcoded sequences to be generated per allele per
SNP}

\item{upstreamContextRange}{the amount of sequence context to acquire
upstream of the SNP}

\item{downstreamContextRange}{the amount of sequence context to acquire
downstream of the SNP}

\item{fwprimer}{a string containing the forward PCR primer to be used}

\item{revprimer}{a string containing the reverse PCR primer to be used}

\item{enzyme1}{a string containing the pattern for the first restriction
enzyme. Defaults to KpnI.}

\item{enzyme2}{a string containing the pattern for the second restriction
enzyme. Defaults to XbaI.}

\item{enzyme3}{a string containing the pattern for the third restriction
enzyme. Defaults to SfiI.}

\item{filterPatterns}{a character vector of patterns to filter out of the
barcode pool (along with their reverse complements)}

\item{alter_aberrant}{under development - logical indicating whether to
randomly alter aberrant digestion sites across barcodes}

\item{extra_elements}{under development - logical indicating whether to
include the extra TG / GGC as shown on the sequence diagram on the shiny
app}

\item{max_construct_size}{under development - integer indicating the maximum
construct size to generate. If provided, constructs that end up longer than
this have sequence context evenly removed from both sides until
sufficiently short.}

\item{barcode_set}{string indicating the barcode set to use. See below for
details.}

\item{outPath}{an optional path stating where to write a .tsv of the results}
}
\value{
A list of two data_frames. The first, named 'result', is a data_frame
  containing the labeled MPRA sequences. The second, named 'failed', is a
  data_frame listing the SNPs that are not able to have MPRA sequences
  generated and the reason why.
}
\description{
\code{processVCF} takes a VCF of SNPs (preferably from dbSNP) and turns them
into a set of labeled MPRA sequences barcoded with inert n-mers
}
\details{
The \code{"filterPatterns"} argument is used to remove barcodes
  containing patterns that may perform badly in a MPRA setting. For example,
  the default, 'AATAAA', corresponds to a sequence required for cleavage and
  polyadenylation of pre-mRNAs in eukaryotic cells.

  The \code{upstreamContextRange} and \code{downstreamContextRange} arguments
  are handled intuitively for minus strand SNPs (i.e. those that have the
  MPRAREV tag). So for a minus strand SNP you get the complement of
  \code{downstreamContextRange} - SNP - \code{upstreamContextRange} as the
  genomic context.

  The three \code{enzyme} arguments may contain ambiguous nucleotides by
  including an N character at the appropriate base (for example the 5 N's in
  the SfiI default).

  The sequence for \code{enzyme3} does not show up in the output sequences,
  however it is necessary to check for it's presence in the output sequences
  as it is used when preparing the plasmid library. Aberrant \code{enzyme3}
  sites could cause the library preparation to fail.

  Alternative barcode sets may be used by specifying the \code{barcode_set}
  argument to \code{processVCF} one of the following values. The first number
  indicates the length of the barcodes in basepairs, the second indicates the
  number of errors correctable while still being able to identify the
  original barcode. These are provided by the freebarcodes package, detailed
  at the publication below and available from the subsequently listed github
  repository. The original barcode set provided with mpradesigntools is
  available as the \code{twelvemers} barcode set. See the README on github
  for a listing of the number of barcodes available per set.
}
